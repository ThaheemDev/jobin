import {ObjectId} from 'mongodb'

export type EventTypeT = {
  // necessary to write templates with the correct id
  _id: ObjectId,
  // Human readable e.g. in the <smart-select>
  value: string;

  // Whether the given type is an "external" type.
  // External types are all those that are not generated by Jobin
  // Examples are: Linkedin Messages, Emails, ...
  isInteraction: boolean;

  // #hex color string for the Background to be inserted in the style='...'
  bckColor: string;

  // #hex color string for the Foreground to be inserted in the style='...'
  foreColor: string;

  // Platform == Linkedin / email / jobin
  platform: 'linkedin' | 'email' | 'jobin'
  onlyKeepLatest?: boolean

  iconName: string;
}

export type OperationCodeNamesT =
    'fullProfileImport' |
    'fullSalesNavProfileImport' |
    'fullTalentProfileImport' |

    'fullProfileImportWithEmail' |
    'fullSalesNavProfileImportWithEmail' |
    'fullTalentProfileImportWithEmail' |

    'sendSingleLinkedinMessage' |
    'sendLinkedinMessage' |
    'sendLinkedinConnectionFollowUp' |
    'sendSingleSalesNavMessage' |
    'salesSendMessage' |
    'linkedinSales' |
    'sendSingleTalentMessage' |
    'talentSendMessage' |
    'sendLinkedinInvite' |
    'sendLinkedinInviteWithEmail' |

    'sendEmailFromEmailSender' |
    'sendBulkEmails'

type EventTypeNamesT =
    'linkedinProfileExtraction' |
    'linkedinAcceptedConnectionRequest' |
    'salesProfileExtraction' |
    'talentProfileExtraction' |

    'linkedinProfileImport' |
    'salesProfileImport' |
    'talentProfileImport' |

    'linkedinProfileImportWithEmail' |
    'salesProfileImportWithEmail' |
    'talentProfileImportWithEmail' |

    'linkedinMessage' |
    'linkedinInMail' |
    'linkedinFollowUp' |
    'linkedinConnectionRequest' |
    'linkedinBypassConnectionRequest' |
    'talentMessage' |
    'talentInMail' |
    'salesMessage' |
    'salesInMail' |
    'salesConnectionRequest' |
    'pipelineMovement' |
    'email' |
    'campaignFinished'

export type EventTypeDbT = {[key in EventTypeNamesT]: EventTypeT}


export function eventTypesFromOperationCodename (codename: OperationCodeNamesT): EventTypeT[] {
  if(codename === 'fullProfileImport' || codename === 'fullSalesNavProfileImport' || codename === 'fullTalentProfileImport') return [eventTypesDb.linkedinProfileImport, eventTypesDb.salesProfileImport, eventTypesDb.talentProfileImport]
  if(codename === 'fullProfileImportWithEmail' || codename === 'fullSalesNavProfileImportWithEmail' || codename === 'fullTalentProfileImportWithEmail') return [eventTypesDb.linkedinProfileImportWithEmail, eventTypesDb.salesProfileImportWithEmail, eventTypesDb.talentProfileImportWithEmail]

  if(codename === 'sendSingleLinkedinMessage' || codename === 'sendLinkedinMessage') return [eventTypesDb.linkedinMessage, eventTypesDb.linkedinInMail]
  if(codename === 'sendLinkedinConnectionFollowUp') return [eventTypesDb.linkedinFollowUp]
  if(codename === 'sendLinkedinInvite' || codename === 'sendLinkedinInviteWithEmail') return [eventTypesDb.linkedinConnectionRequest]
  if(codename === 'sendSingleTalentMessage' || codename === 'talentSendMessage') return [eventTypesDb.talentMessage, eventTypesDb.talentInMail]
  if(codename === 'sendSingleSalesNavMessage' || codename === 'salesSendMessage') return [eventTypesDb.salesMessage, eventTypesDb.salesInMail]
  if(codename === 'sendEmailFromEmailSender' || codename === 'sendBulkEmails') return [eventTypesDb.email]
  return []
}

/**
 *
 * @Deprecated only for backward compatibility (extension)
 *
 * @param id
 */
export function eventTypeFromId (id: string): EventTypeT {
  for(const key in eventTypesDb) {
    if(eventTypesDb[key as EventTypeNamesT]._id.toHexString() === id) return eventTypesDb[key as EventTypeNamesT]
  }

  // linkedin
  if (['5fd74fbf156361153ea4fab1', '5fd255d66defa6f4b5dba559'].includes(id)) return eventTypesDb.linkedinMessage
  if (['602059248fc5d5648e26fbff', '602059568fc5d5648e26fc00', '602059b38fc5d5648e26fc01', '602059b78fc5d5648e26fc02'].includes(id)) return eventTypesDb.linkedinConnectionRequest

  // linkedin sales
  if (['60147be2654fc3512ab93e48', '60147c02654fc3512ab93e4a'].includes(id)) return eventTypesDb.salesMessage
  if (['602059c68fc5d5648e26fc03', '602059c98fc5d5648e26fc04', '602059cc8fc5d5648e26fc05', '602059cf8fc5d5648e26fc06'].includes(id)) return eventTypesDb.salesConnectionRequest

  // jobin
  if (['5fd9c8f26e3b9100c127763d', '5fd9c8e047bc796e77922558'].includes(id)) return eventTypesDb.email

  throw new Error(`eventTypeFromId ${id} not found`)
}

/**
 *  // ======================= WARNING ==================================
 *   Do not touch names! they are important for identification
 *  // ======================= WARNING ==================================
 */
export const eventTypesDb: EventTypeDbT = {
  linkedinProfileExtraction: {
    _id: new ObjectId('629dd7d403a2a1a194707695'),
    value: 'LinkedIn - Profile Extracted',
    iconName: 'user-select',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  linkedinAcceptedConnectionRequest: {
    _id: new ObjectId('6266bd423e8c47cd7c34279b'),
    value: 'Connected on Linkedin',
    iconName: 'linkedin-connection',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  salesProfileExtraction: {
    _id: new ObjectId('62a1213562c0bc062c4aabc8'),
    value: 'LinkedIn Sales Navigator - Profile Extracted',
    iconName: 'user-select',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  talentProfileExtraction: {
    _id: new ObjectId('62a1213b62c0bc062c4aabc9'),
    value: 'LinkedIn Recruiter - Profile Extracted',
    iconName: 'user-select',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  linkedinProfileImport: {
    _id: new ObjectId('5ff722aaac8407136110794c'),
    value: 'LinkedIn - Profile Import',
    iconName: 'linkedin',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5',
    onlyKeepLatest: true
  },
  linkedinProfileImportWithEmail: {
    _id: new ObjectId('62911da47c159231a21b9bee'),
    value: 'LinkedIn - Full Profile Import',
    iconName: 'user-add',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5',
    onlyKeepLatest: true
  },
  salesProfileImportWithEmail: {
    _id: new ObjectId('62a1297f5b72262069d1d168'),
    value: 'Sales Navigator - Full Profile Import',
    iconName: 'user-add',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5',
    onlyKeepLatest: true
  },
  talentProfileImportWithEmail: {
    _id: new ObjectId('62a129865b72262069d1d169'),
    value: 'LinkedIn Recruiter - Full Profile Import',
    iconName: 'user-add',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5',
    onlyKeepLatest: true
  },
  linkedinMessage: {
    _id: new ObjectId('5fd74fbf156361153ea4fab1'),
    value: 'LinkedIn - Message',
    iconName: 'linkedin-message',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  linkedinInMail: {
    _id: new ObjectId('61dc5d9b552f853aa42a63fc'),
    value: 'LinkedIn - InMail',
    iconName: 'linkedin-message',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  linkedinFollowUp: {
    _id: new ObjectId('5fd255d66defa6f4b5dba560'),
    value: 'LinkedIn - Follow-up Message',
    iconName: 'linkedin-message',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  linkedinConnectionRequest: {
    _id: new ObjectId('602059248fc5d5648e26fbff'),
    value: 'LinkedIn - Connection request',
    iconName: 'linkedin-connection',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a70ff',
    foreColor: '#f5f5f5'
  },
  linkedinBypassConnectionRequest: {
    _id: new ObjectId('646fb70ac34510d475a2cd9e'),
    value: 'LinkedIn - Connection request',
    iconName: 'linkedin-connection',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a70ff',
    foreColor: '#f5f5f5'
  },
  talentProfileImport: {
    _id: new ObjectId('60147a98654fc3512ab93e49'),
    value: 'Linkedin Talent - Profile Import',
    iconName: 'linkedin-recruiter',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  talentMessage: {
    _id: new ObjectId('620d173acbac5f0b146b6d92'),
    value: 'Linkedin Recruiter - Message',
    iconName: 'linkedin-recruiter',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  talentInMail: {
    _id: new ObjectId('620d1741cbac5f0b146b6d93'),
    value: 'Linkedin Recruiter - InMail',
    iconName: 'linkedin-recruiter',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  salesProfileImport: {
    _id: new ObjectId('60147a98654fc3512ab93e47'),
    value: 'Sales Navigator - Profile Import',
    iconName: 'linkedin-sales-navigator',
    isInteraction: false,
    platform: 'linkedin',
    bckColor: '#0ac2ff',
    foreColor: '#f5f5f5'
  },
  salesMessage: {
    _id: new ObjectId('60147be2654fc3512ab93e48'),
    value: 'Sales Navigator - Message',
    iconName: 'linkedin-sales-navigator',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  salesInMail: {
    _id: new ObjectId('61dc5dbc552f853aa42a63fd'),
    value: 'Sales Navigator - InMail',
    iconName: 'linkedin-sales-navigator',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a97ff',
    foreColor: '#f5f5f5'
  },
  salesConnectionRequest: { // OBSOLETE!
    _id: new ObjectId('602059c68fc5d5648e26fc03'),
    value: 'Sales Navigator - Connection request',
    iconName: 'linkedin-connection',
    isInteraction: true,
    platform: 'linkedin',
    bckColor: '#0a70ff',
    foreColor: '#f5f5f5'
  },
  pipelineMovement: {
    _id: new ObjectId('5fd3de9da81304758c80d3f8'),
    value: 'Pipeline Movement',
    iconName: 'funnel-5stages',
    isInteraction: false,
    platform: 'jobin',
    bckColor: '#A9FDAE',
    foreColor: '#000000'
  },
  email: {
    _id: new ObjectId('5fd9c8f26e3b9100c127763d'),
    value: 'Email',
    iconName: 'message',
    isInteraction: true,
    platform: 'email',
    bckColor: '#ffe88f',
    foreColor: '#000000'
  },
  campaignFinished: {
    _id: new ObjectId('62d82a8058f58383c7d09aff'),
    value: 'Outreach Sequence Finished',
    iconName: 'speaker-3',
    platform: 'jobin',
    isInteraction: false,
    bckColor: '#46b457',
    foreColor: '#000000'
  }
}

// -------------------------------------------------------------------------------------
// Events are used "in calendar" and also to define some "pipeline stages"
//        (e.g. "Tel.interview" is an appointment in calendar and then also a "pipeline stage" passed by the candidate at that day)
// We define a rich many-to-many "EventType" pivot to mange all situations and combinations.
//        (e.g. "Tel.interview" is and event of type: "inCalendar" + "withAppointment" + "needsConfirmation" + "RecruitingEvent" )

// This system is used to filter events in several different GUI situations and for cron processing.
// We need:
//  'value'(camelCase) to put in the v-if code,
//  'name' to write in the lists and <smart-select> (human readable) and
//  'description' to clarify the use
// -------------------------------------------------------------------------------------

// NOTE: ToDo: many of these probably are not necessary - See the real need in the GUIs (to filter and use in v-if)
//       Think if could be useful to have the camelCase version e.g. 'hasLocation' <=> 'needs a location (room)'

//  @Later
// { value: 'Team',             description: 'Event that has relation with my Team' },
// { value: 'Recruiting',       description: 'Event that is related to the recruiting process in general' },
// { value: 'Social Media',     description: 'Event that is related to Social Posting, licking, commenting, sharing' },
// { value: 'Crm',              description: 'Event that is related to Customer Relationship Management (CRM) operations and your business development activities or sales process pipeline' },
// { value: 'Crm Status',       description: 'It is a status that identifies the Customer Relation that a Recruiting Agency has with its Customer Company' },
//
// { value: 'in Hr Pipeline',   description: 'This is a possible stage in the Recruiting Process pipeline' },
// { value: 'in CRM Pipeline',  description: 'It is a status that identifies the position of a prospect/customer in your sales pipeline' },
//
// { value: 'Main Task',        description: 'It is a Task that is part of your main job activities (important to focus on)' }, //  this is used to select the 5 events/tasks in the '/calendar-task-columns'
// { value: 'Task',             description: 'Events that goes in the Task lists [they have always a Reminder event in the Cron]' }, //  this is used to filter events to put in the '/schedule' task ToDos

// ---[eventTypes used in the app]-----------------------------------------
// { value: 'UnsuccessfulExitFromPipeline',  description: 'It is an event that means to exits from the pipeline (candidate rejection, prospect that steps out, etc.)' },
// { value: 'SuccessfulExitFromPipeline',    description: 'It is an event that means to exits from the pipeline (candidate rejection, prospect that steps out, etc.)' },

//  @Later
// { value: 'Needs a Tel.number',            description: 'This is Telephone appointment (e.g. a Tel.interview or a Teleconference) and we must declare which is the Tel.nr. to call' },
// { value: 'Needs a location',              description: 'This is a physical meeting and in the calendar/task-list there is also the specification of \'where\' this event will take place (e.g. address and meeting room) ' },
// { value: 'Participants notification',     description: 'This event should be notified to Participants and include also a \'Text to invite them\' ' },
// { value: 'Included in Calendar',          description: 'This event will be visualized also in the Calendar views' },
// { value: 'Can have questionnaire',        description: 'Event that when assigned to someone it can also ask for a questionnaire to be answered. e.g. the event of \'Applied for a job\' send a \'Pre-screening\' questionnaire; same as \'1st telephone interview\' or \'F2F interview\' when the recruiter want ask some preliminary question before the call. ' },
//
// //      --------------------
// { value: 'With Appointment',            description: 'This event need the arrangement of an appointment for the participants. e.g. a \'telephone interview\' need an appointment between recruiters and candidate. ' },
// { value: 'Requires confirmation',       description: 'Event that send notification and wait for confirmation.' },
// { value: 'Requires approval',           description: 'Event that send a request to a Manager and wait for approval. ' },
// { value: 'Has Participants',            description: 'This event happens with the participation of the User together with somebody else. Event made with somebody (e.g. a meeting or a telephone call)' },
//
// // ---[eventTypes that could be used in the app => ]-----------------------------------------
// { value: 'Onboarding pipeline',  description: 'This appears in the select list of possible CRM pipeline Stages (funnels)' },
// { value: 'Freelancer-Buyer workflow/milestone',  description: 'events that belong to the freelances workflow' },
// { value: 'Jobseeking',            description: 'It is an event that is part of Jobseeking activities (used to filter what to show in the \'Job seeking history\' timeline graph)' },
//
// { value: 'Is communication',      description: 'This event is a form of communication (from the recipient is valid under the GDPR\'s conditions)' },
// { value: 'Has Message',           description: 'This event has a message attached e.g. \'Received email\' is an event with the email text attached. ' },
//
// { value: 'Task generator',        description: 'If this event is Drag&Drop in the calendar view, this generate a new Task event that day (e.g. email received - set a Task about that for the next week text=\'email subject\')' },
// { value: 'with date',             description: 'Event that needs a date as attribute (e.g. OK until dd/mm/yyyy)' }

//       {
// eventType: 'Event' ,
// description: '',
// },                             // something that just happen (not done by jobin Users) - e.g. 'email received'
//        {
// eventType: 'Required in the pipeline' ,
// description: '',
// },          // this stage is REQUIRED, and every candidate must pass through this (i.e. 'CV received')
//         {
// eventType: 'Corporate-HR Pipeline' ,
// description: '',
// },             // events used by Corporate HR
//         {
// eventType: 'CRM Pipeline' ,
// description: '',
// },                      // events used by CRM, business development activities
